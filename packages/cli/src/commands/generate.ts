/**
 * @fileoverview Generate commands
 *
 * Handles the generation of pages, API routes, and components.
 */
import path from 'path';
import fs from 'fs/promises';
import chalk from 'chalk';
import { ensureDir, resolvePath } from '@rytestack/core';
import { loadProjectConfig } from '../utils';

/**
 * Generates a new page
 *
 * @param pagePath Page path (e.g., "blog/[slug]")
 * @param options Command options
 */
export async function generatePage(pagePath: string, options: { layout?: string }): Promise<void> {
    try {
        const config = await loadProjectConfig();
        const pagesDir = path.join(config.srcDir, 'pages');

        // Normalize path and ensure it doesn't have extension
        const normalizedPath = pagePath.replace(/\\/g, '/').replace(/\.[^/.]+$/, '');

        // Determine file extension based on framework
        let extension = '.js';
        if (config.framework === 'react') {
            extension = '.tsx';
        } else if (config.framework === 'vue') {
            extension = '.vue';
        } else if (config.framework === 'svelte') {
            extension = '.svelte';
        }

        // Create file path
        const filePath = path.join(pagesDir, `${normalizedPath}${extension}`);

        // Ensure directory exists
        await ensureDir(path.dirname(filePath));

        // Create content based on framework
        let content = '';

        if (config.framework === 'react') {
            const layoutImport = options.layout
                ? `import ${options.layout}Layout from '../layouts/${options.layout}';\n`
                : '';

            content = `/**
 * @fileoverview ${pagePath} page
 */
import React from 'react';
import { Meta } from '@rytestack/react';
${layoutImport}

export default function Page() {
  return (
    <div>
      <Meta
        title="${normalizedPath.split('/').pop()?.replace(/^\w/, c => c.toUpperCase()) || 'Page'}"
        description="Generated by Rytestack"
      />
      <h1>${normalizedPath.split('/').pop()?.replace(/^\w/, c => c.toUpperCase()) || 'Page'}</h1>
      <p>This page was generated by Rytestack CLI.</p>
    </div>
  );
}
`;

            if (options.layout) {
                content += `
Page.layout = ${options.layout}Layout;
`;
            }
        } else if (config.framework === 'vue') {
            // Vue template will be implemented later
            content = `<!-- ${pagePath} page -->\n<template>\n  <div>\n    <h1>${normalizedPath.split('/').pop()?.replace(/^\w/, c => c.toUpperCase()) || 'Page'}</h1>\n    <p>This page was generated by Rytestack CLI.</p>\n  </div>\n</template>\n`;
        } else if (config.framework === 'svelte') {
            // Svelte template will be implemented later
            content = `<!-- ${pagePath} page -->\n<h1>${normalizedPath.split('/').pop()?.replace(/^\w/, c => c.toUpperCase()) || 'Page'}</h1>\n<p>This page was generated by Rytestack CLI.</p>\n`;
        }

        // Write file
        await fs.writeFile(filePath, content, 'utf-8');

        console.log(chalk.green(`Page created: ${filePath}`));

    } catch (error) {
        console.error(chalk.red(`Error generating page: ${error instanceof Error ? error.message : String(error)}`));
        process.exit(1);
    }
}

/**
 * Generates a new API route
 *
 * @param routePath API route path (e.g., "users/[id]")
 * @param options Command options
 */
export async function generateApi(routePath: string, options: { methods?: string }): Promise<void> {
    try {
        const config = await loadProjectConfig();
        const apiDir = path.join(config.srcDir, 'api');

        // Normalize path and ensure it doesn't have extension
        const normalizedPath = routePath.replace(/\\/g, '/').replace(/\.[^/.]+$/, '');

        // Create file path
        const filePath = path.join(apiDir, `${normalizedPath}.ts`);

        // Ensure directory exists
        await ensureDir(path.dirname(filePath));

        // Parse methods
        const methods = options.methods ? options.methods.split(',').map(m => m.trim().toLowerCase()) : ['get'];

        // Generate content
        let content = `/**
 * @fileoverview ${routePath} API route
 */
import { RyteApiHandler } from '@rytestack/${config.framework}';
`;

        // Generate handler for each method
        for (const method of methods) {
            content += `
/**
 * ${method.toUpperCase()} handler for ${routePath}
 */
export const ${method}: RyteApiHandler = async (req, res) => {
  res.json({
    message: '${method.toUpperCase()} endpoint for ${routePath}'
  });
};
`;
        }

        // Write file
        await fs.writeFile(filePath, content, 'utf-8');

        console.log(chalk.green(`API route created: ${filePath}`));

    } catch (error) {
        console.error(chalk.red(`Error generating API route: ${error instanceof Error ? error.message : String(error)}`));
        process.exit(1);
    }
}

/**
 * Generates a new component
 *
 * @param name Component name
 * @param options Command options
 */
export async function generateComponent(name: string, options: { directory?: string }): Promise<void> {
    try {
        const config = await loadProjectConfig();
        const componentsDir = path.join(config.srcDir, 'components');

        // Determine directory
        const targetDir = options.directory
            ? path.join(componentsDir, options.directory)
            : componentsDir;

        // Determine extension
        let extension = '.js';
        if (config.framework === 'react') {
            extension = '.tsx';
        } else if (config.framework === 'vue') {
            extension = '.vue';
        } else if (config.framework === 'svelte') {
            extension = '.svelte';
        }

        // Create file path
        const filePath = path.join(targetDir, `${name}${extension}`);

        // Ensure directory exists
        await ensureDir(targetDir);

        // Create content based on framework
        let content = '';

        if (config.framework === 'react') {
            content = `/**
 * @fileoverview ${name} component
 */
import React from 'react';

export interface ${name}Props {
  children?: React.ReactNode;
}

/**
 * ${name} component
 */
export function ${name}({ children }: ${name}Props) {
  return (
    <div className="rytestack-component">
      {children}
    </div>
  );
}
`;
        } else if (config.framework === 'vue') {
            // Vue template will be implemented later
            content = `<!-- ${name} component -->\n<template>\n  <div class="rytestack-component">\n    <slot></slot>\n  </div>\n</template>\n`;
        } else if (config.framework === 'svelte') {
            // Svelte template will be implemented later
            content = `<!-- ${name} component -->\n<div class="rytestack-component">\n  <slot></slot>\n</div>\n`;
        }

        // Write file
        await fs.writeFile(filePath, content, 'utf-8');

        console.log(chalk.green(`Component created: ${filePath}`));

    } catch (error) {
        console.error(chalk.red(`Error generating component: ${error instanceof Error ? error.message : String(error)}`));
        process.exit(1);
    }
}